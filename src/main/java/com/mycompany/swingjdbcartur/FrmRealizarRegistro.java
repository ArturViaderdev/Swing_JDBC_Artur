/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.swingjdbcartur;

import codigo.DAO;
import codigo.Memoria;
import codigo.Metodos;
import datos.Activity;
import datos.Record;
import excepciones.ExcepcionApp;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Pantalla que realiza un registro de una actividad para una fecha o lo modifica
 * @author Artur Viader
 */
public class FrmRealizarRegistro extends javax.swing.JDialog {
    ArrayList<Activity> actividades;
    DAO dao = DAO.getInstancia();
    Memoria memoria = Memoria.getInstancia();
    Boolean modifica=false;
    //Registro en caso de estar en modo modificación
    Record registromodi;
    /**
     * Constructor
     */
    public FrmRealizarRegistro(java.awt.Frame parent, boolean modal, boolean modifica, Record registro) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        setSize(400,250);
        setTitle("Realizar registro");
        
        try {
            //Se leen todas las actividades y se ponen en el combo
            actividades = dao.selectAllActividades();
            for(Activity actividad : actividades)
            {
                cActividad.addItem(actividad.getName() + " - " + actividad.getType());
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
        if(modifica)
        {
            //Modo modificación
            this.modifica = modifica;
            this.registromodi = registro;
            //No se puede modificar la fecha
            dFecha.setEnabled(false);
            //Se selecciona la actividad en el combo
            cActividad.setSelectedIndex(Metodos.dimePosicionActividad(registromodi.getActivity(), actividades));
            //Se pone el comentario en el campo para poderlo modificar
            tComment.setText(registromodi.getComment());
            //Se pone la fecha
            dFecha.setDateTimeStrict(registromodi.getDate());
        }
        else
        {
            //Modo alta. Se pone la fecha de hoy. Esta puede cambiarse.
            dFecha.setDateTimeStrict(LocalDateTime.now());
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cActividad = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tComment = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        bCancelar = new javax.swing.JButton();
        bAceptar = new javax.swing.JButton();
        dFecha = new com.github.lgooddatepicker.components.DateTimePicker();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Actividad");

        jLabel2.setText("Comentario");

        tComment.setColumns(20);
        tComment.setRows(5);
        jScrollPane1.setViewportView(tComment);

        jLabel3.setText("Fecha");

        bCancelar.setText("Cancelar");
        bCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelarActionPerformed(evt);
            }
        });

        bAceptar.setText("Aceptar");
        bAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cActividad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bCancelar)
                .addGap(42, 42, 42)
                .addComponent(bAceptar)
                .addGap(91, 91, 91))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cActividad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bAceptar)
                    .addComponent(bCancelar))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Botón de cancelar o cerrar
     * @param evt 
     */
    private void bCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_bCancelarActionPerformed

    /**
     * Botón de aceptar
     * @param evt 
     */
    private void bAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAceptarActionPerformed
        try {
            //Se comprueba que el campo de comentario no está vacío
            if(tComment.getText().isEmpty())
            {
                throw new ExcepcionApp(ExcepcionApp.RELLENARCAMPOS);
            }
            else    
            {
                if(modifica)
                {
                    //Modo modificación
                    //Se cambia la actividad
                    registromodi.setActivity(actividades.get(cActividad.getSelectedIndex()).getName());
                    //Se cambia el comentario
                    registromodi.setComment(tComment.getText());
                    //Se modifica el registro
                    dao.modificaRegistro(registromodi);
                    JOptionPane.showMessageDialog(this, "Registro modificado.", "Ok", JOptionPane.INFORMATION_MESSAGE);
                }
                else
                {
                    //Modo alta
                    //Se inserta el registro
                    dao.insertRegistro(new Record(memoria.getUsuario(),actividades.get(cActividad.getSelectedIndex()).getName(),dFecha.getDateTimeStrict(),tComment.getText()));
                    JOptionPane.showMessageDialog(this, "Registro añadido.", "Ok", JOptionPane.INFORMATION_MESSAGE);
                }  
                //Se cierra la pantalla
                this.dispose();
            }     
        } catch (ExcepcionApp ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bAceptarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAceptar;
    private javax.swing.JButton bCancelar;
    private javax.swing.JComboBox<String> cActividad;
    private com.github.lgooddatepicker.components.DateTimePicker dFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea tComment;
    // End of variables declaration//GEN-END:variables
}
